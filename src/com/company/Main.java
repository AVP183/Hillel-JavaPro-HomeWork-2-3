package com.company;

public class Main {

    public static void main(String[] args) {
	// ### Часть 3:
        //
        //1. Класс `Phone`.
        //   - Создайте класс `Phone`, который содержит поля: `number`, `model` и `weight`.
        //   - Создайте три экземпляра этого класса.
        //   - Выведите на консоль значения их переменных.
        //   - Добавить в класс Phone методы: `receiveCall`, имеет один параметр – имя звонящего. Выводит на консоль сообщение `Звонит {name}`. `getNumber` – возвращает номер телефона. Вызвать эти методы для каждого из объектов.
        //   - Добавить конструктор в класс `Phone`, который принимает на вход три параметра для инициализации переменных класса - `number`, `model` и `weight`.
        //   - Добавить конструктор, который принимает на вход два параметра для инициализации переменных класса - `number`, `model`.
        //   - Добавить конструктор без параметров.
        //   - Вызвать из конструктора с двумя параметрами конструктор с тремя параметрами.
        //   - Добавьте перегруженный метод `receiveCall`, который принимает два параметра - имя звонящего и номер телефона звонящего. Вызвать этот метод.
        //   - Создать метод `sendMessage` с аргументами переменной длины. Данный метод принимает на вход номера телефонов, которым будет отправлено сообщение. Метод выводит на консоль номера этих телефонов.
        //---
        //2. Создать класс `Person`, который содержит:
        //   - поля `fullName`, `age`.
        //   - методы `move()` и `talk()`, в которых просто вывести на консоль сообщение -`Такой-то  Person говорит`.
        //   - Добавьте два конструктора  - `Person()` и `Person(fullName, age)`.
        //Создайте два объекта этого класса. Один объект инициализируется конструктором `Person()`, другой - `Person(fullName, age)`.
        //---
        //3. Создать класс `Matrix`. Класс должен иметь следующие поля:
        //   - двумерный массив вещественных чисел;
        //   - количество строк и столбцов в матрице.
        //   - Добавить следующие методы:
        //        1) сложение с другой матрицей;
        //        2) умножение на число;
        //        3) вывод на печать;
        //        4) умножение матриц - по желанию.
        //---
        //4. Определить класс `Reader`, хранящий такую информацию о пользователе библиотеки: `ФИО`, `номер читательского билета`, `факультет`, `дата рождения`, `телефон`. Методы `takeBook()`, `returnBook()`.
        //   - Перегрузить методы `takeBook()`, `returnBook()`:
        //        - `takeBook`, который будет принимать количество взятых книг. Выводит на консоль сообщение "Петров В. В. взял 3 книги".
        //        - `takeBook`, который будет принимать переменное количество названий книг. Выводит на консоль сообщение "Петров В. В. взял книги: Приключения, Словарь, Энциклопедия".
        //        - `takeBook`, который будет принимать переменное количество объектов класса `Book` (создать новый класс, содержащий имя и автора книги). Выводит на консоль сообщение "Петров В. В. взял книги: Приключения, Словарь, Энциклопедия".
        // Аналогичным образом перегрузить метод `returnBook()`. Выводит на консоль сообщение "Петров В. В. вернул книги: Приключения, Словарь, Энциклопедия". Или  "Петров В. В. вернул 3 книги".
        //---
        //5. Создайте пример наследования, реализуйте класс `Student` и класс `Aspirant`, аспирант отличается от студента наличием некой научной работы.
        //   - Класс Student содержит переменные: `String firstName`, `lastName`, `group`. А также `double averageMark`, содержащую среднюю оценку.
        //   - Создать переменную типа `Student`, которая ссылается на объект типа Aspirant`.
        //   - Создать метод `getScholarship()` для класса `Student`, который возвращает сумму стипендии. Если средняя оценка студента равна 5, то сумма 100 грн, иначе 80. Переопределить этот метод в классе `Aspirant`.  Если средняя оценка аспиранта равна 5, то сумма 200 грн, иначе 180.
        //   - Создать массив типа `Student`, содержащий объекты класса `Student` и `Aspirant`. Вызвать метод `getScholarship()` для каждого элемента массива.
        //---
        //6. Создать класс `Car` в пакете `com.company.vehicles`, `Engine` в пакете `com.company.details` и `Driver` в пакете `com.company.professions`. Класс `Driver` содержит поля - `ФИО`, `стаж вождения`. Класс `Engine` содержит поля - `мощность`, `производитель`. Класс `Car` содержит поля - `марка автомобиля`, `класс автомобиля`, `вес`, водитель типа `Driver`, мотор типа `Engine`.
        //Методы `start()`, `stop()`, `turnRight()`, `turnLeft()`, которые выводят на печать: "Поехали", "Останавливаемся", "Поворот направо" или "Поворот налево". А также метод `printInfo()`, который выводит полную информацию об автомобиле, ее водителе и моторе.
        //Создать производный от `Car` класс  - `Lorry` (грузовик), характеризуемый также грузоподъемностью кузова.
        //Создать производный от `Car` класс - `SportCar`, характеризуемый также предельной скоростью. Пусть класс `Driver` расширяет класс `Person`.
        //---
        //7. Создать класс `Animal` и расширяющие его классы `Dog`, `Cat`, `Horse`. Класс `Animal` содержит переменные `food`, `location` и методы `makeNoise`, `eat`, `sleep`. Метод makeNoise, например, может выводить на консоль "Такое-то животное спит". `Dog`, `Cat`, `Horse` переопределяют методы `makeNoise`, `eat`. Добавьте переменные в классы `Dog`, `Cat`, `Horse`, характеризующие только этих животных. Создайте класс Ветеринар, в котором определите метод `void treatAnimal(Animal animal)`. Пусть этот метод распечатывает `food` и `location` пришедшего на прием животного. В методе main создайте массив типа `Animal`, в который запишите животных всех имеющихся у вас типов. В цикле отправляйте их на прием к ветеринару.
        Phone phone1 = new Phone(123456, "Sony", 8.5);
        Phone phone2 = new Phone(456789, "Redmi", 12.2);
        Phone phone3 = new Phone(987321, "Apple", 3.8);
        System.out.println(phone1.toString());
        System.out.println((phone2.toString()));
        System.out.println(phone3.toString());
        phone1.receiveCall("Vasya");
        phone1.getNumber();
        phone2.receiveCall("Petya");
        phone2.getNumber();
        phone3.receiveCall("Anna");
        phone3.getNumber();
        phone1.receiveCall("Jhonny", 147258);
        phone2.receiveCall("Hercules", 369258);
        phone3.receiveCall("Aragorn", 789456);
        phone1.sendMessage(new int[]{444, 5555, 4555, 5555});
    }
}
